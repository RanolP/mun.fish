# Build stage
FROM node:20-alpine AS builder
RUN corepack enable pnpm
WORKDIR /app

# Copy workspace files
COPY pnpm-workspace.yaml ./
COPY package.json pnpm-lock.yaml* ./
COPY turbo.json ./

# Copy package files
COPY packages/eslint-config/package.json ./packages/eslint-config/
COPY packages/typescript-config/package.json ./packages/typescript-config/
COPY apps/backend/package.json ./apps/backend/

# Install dependencies
RUN --mount=type=cache,id=pnpm,target=/root/.local/share/pnpm/store pnpm install --frozen-lockfile

# Copy source files
COPY packages ./packages
COPY apps/backend ./apps/backend

# Build the backend
RUN pnpm turbo build --filter=@mun-fish/backend

# Production stage
FROM node:20-alpine
RUN corepack enable pnpm
WORKDIR /app

# Copy workspace structure needed for production install
COPY --from=builder /app/pnpm-workspace.yaml ./
COPY --from=builder /app/package.json ./
COPY --from=builder /app/pnpm-lock.yaml ./
COPY --from=builder /app/turbo.json ./

# Copy package.json files for workspace packages
COPY --from=builder /app/packages/eslint-config/package.json ./packages/eslint-config/
COPY --from=builder /app/packages/typescript-config/package.json ./packages/typescript-config/
COPY --from=builder /app/apps/backend/package.json ./apps/backend/

# Install production dependencies only
RUN pnpm install --prod --frozen-lockfile --filter=@mun-fish/backend

# Copy built application
COPY --from=builder /app/apps/backend/dist ./apps/backend/dist

EXPOSE 4000
CMD ["node", "apps/backend/dist/index.js"]